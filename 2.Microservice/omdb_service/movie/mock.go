// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package movie is a generated GoMock package.
package movie

import (
	http "net/http"
	omdb "omdb_service/infrastructure/omdb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ProceedGetMovie mocks base method.
func (m *MockService) ProceedGetMovie(movieId, title string) (omdb.MovieInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProceedGetMovie", movieId, title)
	ret0, _ := ret[0].(omdb.MovieInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProceedGetMovie indicates an expected call of ProceedGetMovie.
func (mr *MockServiceMockRecorder) ProceedGetMovie(movieId, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProceedGetMovie", reflect.TypeOf((*MockService)(nil).ProceedGetMovie), movieId, title)
}

// ProceedGetMovies mocks base method.
func (m *MockService) ProceedGetMovies(searchWord, pagination string) (omdb.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProceedGetMovies", searchWord, pagination)
	ret0, _ := ret[0].(omdb.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProceedGetMovies indicates an expected call of ProceedGetMovies.
func (mr *MockServiceMockRecorder) ProceedGetMovies(searchWord, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProceedGetMovies", reflect.TypeOf((*MockService)(nil).ProceedGetMovies), searchWord, pagination)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertLog mocks base method.
func (m *MockRepository) InsertLog(log LogMovieSearch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLog", log)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLog indicates an expected call of InsertLog.
func (mr *MockRepositoryMockRecorder) InsertLog(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLog", reflect.TypeOf((*MockRepository)(nil).InsertLog), log)
}

// MockMiddleware is a mock of Middleware interface.
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware.
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance.
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// LogSearch mocks base method.
func (m *MockMiddleware) LogSearch(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogSearch", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// LogSearch indicates an expected call of LogSearch.
func (mr *MockMiddlewareMockRecorder) LogSearch(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSearch", reflect.TypeOf((*MockMiddleware)(nil).LogSearch), next)
}
